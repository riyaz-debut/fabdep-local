- hosts: all
  become: yes
  gather_facts: false
  module_defaults:
    apt:
      force_apt_get: yes
  tasks:
    - name: Add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: "kubernetes"

    # - name: Install Docker, APT transport, kubelet, kubeadm, kubectl, nfs
    #   apt:
    #     name:
    #       [
    #         "docker.io",
    #         "apt-transport-https",
    #         "kubelet=1.18.0-00",
    #         "kubeadm=1.18.0-00",
    #         "kubectl=1.18.0-00",
    #         "nfs-kernel-server",
    #       ]
    #     state: present
    #     update_cache: true

# ---------------------------------------------------------------------------------------------------------------------

    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: true

    - name: Installing Prerequisites for Kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          # - gnupg-agent
          # - vim
          # - build-essential
          # - software-properties-common
          - nfs-kernel-server
        state: present
        update_cache: true

    - name: Enable service docker, and enable persistently
      service: 
        name: docker
        enabled: yes

    # - name: Add Kubernetes apt-key
    #   apt_key:
    #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #     state: present

    # - name: Add Kubernetes' APT repository
    #   apt_repository:
    #     repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    #     state: present
    #     filename: 'kubernetes'

    - name: Install kubelet
      apt:
        name: kubelet=1.19.4-00
        state: present
        update_cache: true

    - name: Install kubeadm
      apt:
        name: kubeadm=1.19.4-00
        state: present
       
    - name: Enable service kubelet, and enable persistently
      service: 
        name: kubelet
        enabled: yes

    - name: Install kubectl
      apt:
        name: kubectl=1.19.4-00
        state: present
        force: yes 

# ---------------------------------------------------------------------------------------------------------------------

    - name: Initialize the Cluster
      shell: sudo kubeadm init --apiserver-cert-extra-sans={{ansible_host}} --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - pause: seconds=10

    - name: Create .kube directory
      file:
        path: /home/{{ansible_user}}/.kube
        state: directory
        mode: 0755

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ansible_user}}/.kube/config
        remote_src: yes
        owner: "{{ansible_user}}"

    - name: Install Pod network
      become_user: "{{ ansible_user }}"
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_command

- hosts: all
  gather_facts: false
  vars:
    cluster_id: "{{ cluster_id }}"
  tasks:
    - name: Copy join command to local file
      local_action:
        module: file
        state: directory
        path: "~/.fabdep-1.4.6/join-command"
        recurse: yes
        mode: "u=rwx,g=rx,o=rx"

    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="~/.fabdep-1.4.6/join-command/{{ cluster_id }}"

- hosts: all
  become: yes
  gather_facts: false
  vars:
    nfsexport: "/home/export"
  tasks:
    - name: Create mountable dir
      file:
        path: "{{nfsexport}}"
        state: directory
        mode: 755
        owner: nobody
        group: nogroup

    - name: Fetch the .kube/config to local
      fetch:
        src: /home/{{ansible_user}}/.kube/config
        dest: ~/
